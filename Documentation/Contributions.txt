2/24, 2/25 - Sam & Juan make wireframe. Mason & Andres design housing.

3/12, 3/13- Entire team decided on hardware needed.

3/13- Hardware ordered (Bluetooth modules).

3/18, 3/19- Received the hardware (Bluetooth modules).

3/19- Meeting to create Android Studio App Project and Microchip Studio Project (Mason, Andres, Juan, Sam)
3/19- Mason soldered headers and distributed hardware to everyone.

3/21 - Juan updated wireframe to include "Choose Controller" Page

3/29 - Mason starting AT command implementation for bluetooth modules via SPI (getting network connections setup)
3/30 - Mason Continue AT command implementation. (Hope to finish tomorrow/over the weekend.)
3/30, 3/31- Mason Wired up the Bluetooth module, currently in pairing mode and waiting for AT commands. Implemented SPI library and confirmed with oscilloscope that this indeed works.

3/31 - Andres created vector assets for the Android app and distrubuted AVD with testing device specifications.

4/1 - Mason still working on AT commands, bluetooth module is responding but I have not decoded the return messages yet.

4/2 - Mason hooked up USART to output and debug using PuTTY serial plot.

4/3 - Andres implemented a basic splash screen that redirects to home screen on app startup. Edited app manifold to display correct app name and implemented app icons.

4/4 - Sam tested app on physical device, made home screen layout.
4/4 - Mason doing research on bluetooth protocol.

4/5 - Mason got transmission working with XMega SPI module & ordered a new phone to test the app on.
4/5 - Sam made controller select screen layout and attempted to fix bluetooth issues.
4/5 - Juan started bluetooth connection for the app.
4/5 - Andres picked up where Juan left off and updated manifold with correct BT perms.  Did additional research as setting up Bluetooth is Android version dependent.

4/6 - Andres implemented permission prompts and ensuring BT adapter is enabled and accessible in app.
4/6 - Sam tested Bluetooth functionality on hardware.
4/6 - (Juan, Andres, Mason) Pair programming session to fix bugs with the BT adapter and allow app to scan for BLE devices.
4/6 - Juan created a layout for the Design Prototype Report and shared it with the team
4/6 - Mason updated firmware, adding functionality for receiving data.

4/7 - Sam tested Bluetooth functionality on hardware, implemented selecting a controller and console type, and started making the emulated controller.
4/7 - Juan Started GATT server implementation
4/7 - Mason continuing firmware update.
4/7 - (Juan, Andres, Mason, Sam) Pair Programming to test and fix bugs for GATT server implementation.

4/8 - Sam started implemented emulated controller inputs.
4/8 - (Andres, Juan, Mason) Pair programming to complete GATT server connection and BLE data transfer.

4/9 - Mason finishing up demo firmware & testing system to ensure functionality (looking for pkg to install app on phone).
4/9-  Mason designed and built demo circuit using LEDs to show controller emulation via Bluetooth.
4/9 - Andres put together the developed Bluetooth functionality, emulated controller, and UI into one cohesive application. Exported APK for demo.
4/9 - Mason intalled APK standalone application on phone and ensured that it works properly thanks to Andres.

4/10 - Juan made Progress Presentation on Canva.
4/10 - Andres and Mason made progress on prototype report.

4/11 - Juan finalized Progress Presentation.
4/11 - Juan made progress on prototype report.

8/29 - Juan and Sam made progress on App UI to list available services.
8/30 - Mason changed some firmware code. Able to read Xbox One Controller address now.
8/31 - Sam made progress on listing available services.

9/1 - Andres inspected firmware code to see if it could be refactored.  Did research on XBOX controller drivers.

9/5 - Mason did research on AT commands to update GATT services of the bluetooth module.
9/6 - Mason did research on proprietary hardware.

9/8 - Andres did research on USB drivers for game controllers, and writing USB HID drivers.

9/9 - Juan made progress on the Alpha Test Plan, setting up skeleton of document, and adding task flows for software components.
9/9 - Andres, Mason, and Sam finished the Alpha Build and Alpha Test Plan.

9/15 - Mason researched new/improved hardware, initated list of possible hardware components.
9/16 - Mason ordered new hardware: shield, mega 2560, bt

9/21 - Mason tested new hardware (WORKS). Writing basic functionality to support new hardware- essentially a conversion from old hardware to new, not too much has changed.

9/25 Juan, Andres, Mason, Sam met to discuss shift in development based on Mason new discovery with new hardware. 

9/26 - Sam worked on the Beta Build of the app.

9/27 - Mason revisit documentation to update it for the new build.
9/27 - Juan made progress on Beta Test Plan

10/2 - Mason and Andres met to complete the Beta Test Plan and Beta Build.
10/3, 10/4 - Mason worked on HID implementation.
10/5 - Mason Finished all parts to turn in for Beta Build.
10/6 - Mason started preparing demo for Beta Build.
10/7 - Mason finished demo.
10/8 - Mason continued on HID implementation.

10/15 - Mason worked on soldering a PCB to modularize the build.
10/16 - Andres began refactoring code for the Companion App and redesigning some elements. Mason worked on PCB.

10/17 - Whole group met up and tested input controllers, PS5 and PS4 read correctly.  App went through revisions.
10/18 - Sam fully implemented redesign of app.

10/19 - Mason continued PCB (had to restart a couple of times to get it right).
10/19 - Mason worked on getting switching between devices setup.
10/19 - Mason implemented software SPI for custom pins attached to an interrupt controller.

10/21 - Mason Finished resolding the final PCB
10/22 - Mason setup interrupt controller to receive switching commands from the phone app (WORKS).
10/22 - Mason building software for testing switching controllers.
10/22, 10/23 - Sam designed first draft of uControl case.

10/26 - Juan, Andres, and Sam met to begin writing the Preliminary Report.
10/27, 10/28 - Juan and Andres met to finish the Preliminary Report.
10/28 - Mason finished packaging RC build and updating README.
10/29 - Mason accidentally destroyed some hardware while soldering and needed to go get another bluetooth module from Juan.

11/05 - Mason began new HID firmware writing.
11/06 - Mason did research on HID device descriptors, specifically INPOINTS and ENDPOINTS.
11/10 - Mason added LUFA library to repo to compile against in order to generate HID firmware for the 16U2.  Andres installed custom firmware onto a Nintendo Wii to prepare it for testing purposes.
11/11 - Mason began testing new HID descriptors (works on PC sort of right now).  Andres prepared HIDTest program for Wii and verified that it worked with other controllers.
11/12 - Mason received Wii in order to test console HID performance/compatability.
11/13 - Mason resumed adding support for new controller. I basically rewrote a lot of the code to be modular and class-based so we can support more in the future.
11/26 - Mason finishing up testing the HID. Descriptor now reads "uControl Demo HID" as the device name and can be setup as a controller on Windows machines.

11/29 - Mason recorded demo for production release and began updating the necessary info for final release.
11/29 - Mason tweaked a couple of things on the app for visibility/functionality (nothing major).

11/30 - Mason finished the production release and updated the GitHub repository.
11/30 - Juan, Mason, Andres and Sam worked on finishing the Final Report and Post Mortem Presentation.
